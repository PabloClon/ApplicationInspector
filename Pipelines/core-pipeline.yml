# Azure Pipelines
# https://aka.ms/yaml

name: ApplicationInspector_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
- master

jobs:
- job: publish_nix
  displayName: Dotnet Publish Linux & Mac
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: PowerShell@2
    displayName: Set Release Version
    inputs:
      targetType: 'inline'
      script: 'If ($env:RELEASEVERSION -eq 0) {Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$env:BUILD_SOURCEVERSION"}'
  - task: DotNetCoreCLI@2
    displayName: Dotnet Publish Linux x64
    inputs:
      command: 'publish'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)/linux/ApplicationInspector_$(ReleaseVersion) -r linux-x64 /p:DebugType=None'
      publishWebProjects: false
      zipAfterPublish: false
  - task: DotNetCoreCLI@2
    displayName: Dotnet Publish MacOS x64
    inputs:
      command: 'publish'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)/macos/ApplicationInspector_$(ReleaseVersion) -r osx-x64 /p:DebugType=None'
      publishWebProjects: false
      zipAfterPublish: false
  - task: ArchiveFiles@2
    displayName: Archive Artifact - Linux
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/linux/ApplicationInspector_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/ApplicationInspector_linux_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - MacOS
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/macos/ApplicationInspector_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)/ApplicationInspector_macos_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: PublishBuildArtifacts@1
    displayName: Store Linux & Mac Archives
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)'
      ArtifactName: 'NixArchives'
      publishLocation: 'Container'

- job: publish_win
  displayName: Dotnet Publish Windows & NetCore
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: PowerShell@2
    displayName: Set Release Version
    inputs:
      targetType: 'inline'
      script: 'If ($env:RELEASEVERSION -eq 0) {Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$env:BUILD_SOURCEVERSION"}'
  - task: DotNetCoreCLI@2
    displayName: Dotnet Publish Windows x86
    inputs:
      command: 'publish'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)\windows\ApplicationInspector_$(ReleaseVersion) -r win-x86 /p:DebugType=None'
      publishWebProjects: false
      zipAfterPublish: false
  - task: DotNetCoreCLI@2
    displayName: Dotnet Build .NET Core App
    inputs:
      command: 'build'
      arguments: '-c $(BuildConfiguration) -o $(Build.BinariesDirectory)\netcoreapp3.0\ApplicationInspector_$(ReleaseVersion) /p:DebugType=None'
      publishWebProjects: false
      zipAfterPublish: false
  - task: AntiMalware@3
    displayName: Anti-Malware Scan
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.BinariesDirectory)'
      EnableServices: true
      SupportLogOnError: false
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Error'
  - task: EsrpCodeSigning@1
    displayName: Code Sign
    inputs:
      ConnectedServiceName: 'AppInspector_CodeSign'
      FolderPath: '$(Build.BinariesDirectory)\windows\ApplicationInspector_$(ReleaseVersion)'
      Pattern: 'AppInspector.dll, AppInspector.exe, RulesEngine.dll'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
  - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
    displayName: 'Delete Code Sign Summaries'
  - task: ArchiveFiles@2
    displayName: Archive Artifact - Windows
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\windows\ApplicationInspector_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)\ApplicationInspector_windows_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: ArchiveFiles@2
    displayName: Archive Artifact - .NET Core App
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)\netcoreapp3.0\ApplicationInspector_$(ReleaseVersion)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.StagingDirectory)\ApplicationInspector_netcoreapp3.0_$(ReleaseVersion).zip'
      replaceExistingArchive: true
  - task: PublishBuildArtifacts@1
    displayName: Store Windows & NetCoreApp Archives
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)'
      ArtifactName: 'WinCoreArchives'
      publishLocation: 'Container'
  
- job: hashes
  displayName: Generate Hashes
  dependsOn:
  - publish_nix
  - publish_win
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: Retrieve Linux & Mac Archives
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: 'NixArchives/*.zip'
      downloadPath: '$(Build.BinariesDirectory)'
  - task: DownloadBuildArtifacts@0
    displayName: Retrieve Windows & NetCoreApp Archives
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: 'WinCoreArchives/*.zip'
      downloadPath: '$(Build.BinariesDirectory)'
  - task: PowerShell@2
    displayName: Move Linux & Mac Archives
    inputs:
      targetType: 'inline'
      script: 'mv $env:BUILD_BINARIESDIRECTORY/NixArchives/*.zip $env:BUILD_STAGINGDIRECTORY'
  - task: PowerShell@2
    displayName: Move Windows & NetCoreApp Archives
    inputs:
      targetType: 'inline'
      script: 'mv $env:BUILD_BINARIESDIRECTORY/WinCoreArchives/*.zip $env:BUILD_STAGINGDIRECTORY'
  - task: PowerShell@2
    displayName: Generate Archive Hashes
    inputs:
      targetType: 'inline'
      script: |
        Get-ChildItem $(Build.StagingDirectory) | Foreach-Object {
          $name = $_.Name
          $tmp = (Get-FileHash "$(Build.StagingDirectory)\$name").Hash
          Add-Content $(Build.StagingDirectory)\HASHES.txt "$tmp`t$name"
        }
  - task: PublishPipelineArtifact@1
    displayName: Publish All Artifacts
    inputs:
      targetPath: '$(Build.StagingDirectory)'
      artifact: 'Binaries'

- job: sdl
  displayName: SDL Tools
  dependsOn: hashes
  condition: and(succeeded(), eq(variables['RunSDL'], 'TRUE'))
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: 'build'
      arguments: '-o $(Build.StagingDirectory) /p:DebugType=Full'
  - task: AntiMalware@3
    displayName: Anti-Malware Scan
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.StagingDirectory)'
      EnableServices: true
      SupportLogOnError: false
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Error'
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Governance
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'Low'
  - task: notice@0
    displayName: Notice File Generator
    inputs:
      outputformat: 'text'
    continueOnError: true
  - task: PoliCheck@1
    displayName: PoliCheck
    inputs:
      inputType: 'Basic'
      targetType: 'F'
      targetArgument: '$(Build.SourcesDirectory)'
      result: 'PoliCheck.xml'
  - task: BinSkim@3
    displayName: BinSkim
    inputs:
      InputType: 'CommandLine'
    continueOnError: true
  - task: Semmle@0
    displayName: Semmle Scan
    inputs:
      sourceCodeDirectory: '$(Build.SourcesDirectory)'
      language: 'csharp'
      cleanupBuildCommands: 'dotnet clean'
      buildCommands: 'dotnet build'
      querySuite: 'Recommended'
      timeout: '1800'
      ram: '16384'
      addProjectDirToScanningExclusionList: true
    continueOnError: true
  - task: PublishPipelineArtifact@1
    displayName: Publish PoliCheck Result
    inputs:
      targetPath: '$(Pipeline.Workspace)\_sdt\logs\PoliCheck\PoliCheck.xml'
      artifact: 'PoliCheck.xml'
  - task: PublishPipelineArtifact@1
    displayName: Publish BinSkim Result
    inputs:
      targetPath: '$(Pipeline.Workspace)\_sdt\logs\BinSkim\BinSkim.sarif'
      artifact: 'BinSkim.sarif'
    continueOnError: true
  - task: PublishPipelineArtifact@1
    displayName: Publish Semmle Result
    inputs:
      targetPath: '$(Pipeline.Workspace)\_sdt\logs\Semmle\csharp\microsoft.ApplicationInspector-csharp-1.sarif'
      artifact: 'Semmle.sarif'
    continueOnError: true
  - task: SdtReport@1
    displayName: Generate SDT Report
    inputs:
      VstsConsole: false
      TsvFile: false
      AllTools: false
      APIScan: false
      BinSkim: false
      CodesignValidation: true
      CodesignValidationBreakOn: 'Error'
      CredScan: false
      FortifySCA: false
      FxCop: false
      ModernCop: false
      MSRD: false
      PoliCheck: true
      PoliCheckBreakOn: 'Severity1'
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: true
      SemmleBreakOn: 'Error'
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'
